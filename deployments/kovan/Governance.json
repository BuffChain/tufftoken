{
  "address": "0x0D01e40Fee2BB4A7A54460d28AF43f698e6e4732",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "_isHolder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_author",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_electionEnd",
          "type": "uint256"
        }
      ],
      "name": "createElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "electionIndex",
          "type": "uint256"
        }
      ],
      "name": "endElection",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getElectionLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "electionIndex",
          "type": "uint256"
        }
      ],
      "name": "getElectionMetaData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "electionIndex",
          "type": "uint256"
        }
      ],
      "name": "getRemainingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "electionIndex",
          "type": "uint256"
        }
      ],
      "name": "getVoteCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernanceInit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "electionIndex",
          "type": "uint256"
        }
      ],
      "name": "isProposalSuccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "electionIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approve",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x138c7cbecbce8767372626ceb42084c9dca42cf105086ce6d8f091c539541025",
  "receipt": {
    "to": null,
    "from": "0x4d5031A3BF5b4828932D0e1C3006cC860b97aC3c",
    "contractAddress": "0x0D01e40Fee2BB4A7A54460d28AF43f698e6e4732",
    "transactionIndex": 3,
    "gasUsed": "1230514",
    "logsBloom": "0x
    "blockHash": "0xa4c1c562355d8c1d732b18413fef9bbbcc7efd07edc91573cdfe8f85c00d5ab9",
    "transactionHash": "0x138c7cbecbce8767372626ceb42084c9dca42cf105086ce6d8f091c539541025",
    "logs": [],
    "blockNumber": 28963705,
    "cumulativeGasUsed": "2538946",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "07b7b6cf29429380ef804aeb33e7809b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"_isHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_author\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_electionEnd\",\"type\":\"uint256\"}],\"name\":\"createElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"electionIndex\",\"type\":\"uint256\"}],\"name\":\"endElection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getElectionLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"electionIndex\",\"type\":\"uint256\"}],\"name\":\"getElectionMetaData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"electionIndex\",\"type\":\"uint256\"}],\"name\":\"getRemainingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"electionIndex\",\"type\":\"uint256\"}],\"name\":\"getVoteCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernanceInit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"electionIndex\",\"type\":\"uint256\"}],\"name\":\"isProposalSuccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"electionIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approve\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Governance.sol\":\"Governance\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {GovernanceLib} from \\\"./GovernanceLib.sol\\\";\\n\\ncontract Governance {\\n    modifier governanceInitLock() {\\n        require(isGovernanceInit(), string(abi.encodePacked(GovernanceLib.NAMESPACE, \\\": \\\", \\\"UNINITIALIZED\\\")));\\n        _;\\n    }\\n\\n    //TODO: Is this needed?\\n    using SafeMath for uint256;\\n\\n    //Basically a constructor, but the hardhat-deploy plugin does not support diamond contracts with facets that has\\n    // constructors. We imitate a constructor with a one-time only function. This is called immediately after deployment\\n    function initGovernance() public {\\n        require(!isGovernanceInit(), string(abi.encodePacked(GovernanceLib.NAMESPACE, \\\": \\\", \\\"ALREADY_INITIALIZED\\\")));\\n\\n        GovernanceLib.StateStorage storage ss = GovernanceLib.getState();\\n\\n        ss.isInit = true;\\n    }\\n\\n    function isGovernanceInit() public view returns (bool) {\\n        GovernanceLib.StateStorage storage ss = GovernanceLib.getState();\\n        return ss.isInit;\\n    }\\n\\n    function createElection(\\n        string memory _name,\\n        string memory _description,\\n        string memory _author,\\n        uint256 _electionEnd\\n    ) public governanceInitLock {\\n        GovernanceLib.StateStorage storage ss = GovernanceLib.getState();\\n\\n        uint256 electionIndex = getElectionLength();\\n        ss.elections.push();\\n\\n        GovernanceLib.Election storage election = ss.elections[electionIndex];\\n        election.name = _name;\\n        election.description = _description;\\n        election.author = _author;\\n        election.electionEnd = _electionEnd;\\n    }\\n\\n    function endElection(uint256 electionIndex) public governanceInitLock returns (bool, uint256, uint256) {\\n        GovernanceLib.StateStorage storage ss = GovernanceLib.getState();\\n\\n        require(block.timestamp > ss.elections[electionIndex].electionEnd, \\\"Cannot end before allotted time.\\\");\\n        require(!ss.elections[electionIndex].ended, \\\"Election has already been ended.\\\");\\n\\n        ss.elections[electionIndex].ended = true;\\n\\n        return isProposalSuccess(electionIndex);\\n    }\\n\\n    function vote(uint256 electionIndex, bool approve) public virtual governanceInitLock returns (bool) {\\n        GovernanceLib.StateStorage storage ss = GovernanceLib.getState();\\n\\n        require(block.timestamp < ss.elections[electionIndex].electionEnd, \\\"Cannot vote after election has ended.\\\");\\n        require(!ss.elections[electionIndex].voters[msg.sender].voted, \\\"Cannot vote twice.\\\");\\n        require(_isHolder(msg.sender), \\\"Must be a holder to vote.\\\");\\n\\n        ss.elections[electionIndex].voters[msg.sender].voted = true;\\n        ss.elections[electionIndex].voters[msg.sender].approve = approve;\\n\\n        ss.elections[electionIndex].votes[approve] = ss.elections[electionIndex].votes[approve].add(1);\\n        return true;\\n    }\\n\\n    function getElectionLength() public view governanceInitLock returns (uint256) {\\n        GovernanceLib.StateStorage storage ss = GovernanceLib.getState();\\n        return ss.elections.length;\\n    }\\n\\n    function getElectionMetaData(uint256 electionIndex) public view governanceInitLock returns (\\n        string memory,\\n        string memory,\\n        string memory,\\n        uint256,\\n        bool\\n    ) {\\n        GovernanceLib.StateStorage storage ss = GovernanceLib.getState();\\n\\n        return (\\n        ss.elections[electionIndex].name,\\n        ss.elections[electionIndex].description,\\n        ss.elections[electionIndex].author,\\n        ss.elections[electionIndex].electionEnd,\\n        ss.elections[electionIndex].ended\\n        );\\n    }\\n\\n    function _isHolder(address sender) public view returns (bool) {\\n        return IERC20(address(this)).balanceOf(sender) > 0;\\n    }\\n\\n    function getVoteCounts(uint256 electionIndex) public view virtual governanceInitLock returns (uint256, uint256) {\\n        GovernanceLib.StateStorage storage ss = GovernanceLib.getState();\\n        return (ss.elections[electionIndex].votes[true], ss.elections[electionIndex].votes[false]);\\n    }\\n\\n    function getRemainingTime(uint256 electionIndex) public view virtual governanceInitLock returns (uint256) {\\n        GovernanceLib.StateStorage storage ss = GovernanceLib.getState();\\n        return ss.elections[electionIndex].electionEnd.sub(block.timestamp);\\n    }\\n\\n    // proposals will only fail with 2/3 veto\\n    function isProposalSuccess(uint256 electionIndex) public view virtual governanceInitLock returns (bool, uint256, uint256) {\\n        GovernanceLib.StateStorage storage ss = GovernanceLib.getState();\\n\\n        uint256 vetoCount = ss.elections[electionIndex].votes[false];\\n\\n        if (vetoCount == 0) {\\n            return (true, ss.elections[electionIndex].votes[true], ss.elections[electionIndex].votes[false]);\\n        }\\n\\n        return (\\n        ss.elections[electionIndex].votes[true].div(ss.elections[electionIndex].votes[false]).mul(100) > 33,\\n        ss.elections[electionIndex].votes[true],\\n        ss.elections[electionIndex].votes[false]\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf6f95ea7c5cc1c4c63982408df54d357811c4bea970da7c3150d2b18e65b7ae3\",\"license\":\"agpl-3.0\"},\"contracts/GovernanceLib.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary GovernanceLib {\\n    //IMPORTANT: You must increment this string if you add a new variable to StateStorage that is not at the end\\n    string constant NAMESPACE = \\\"io.BuffChain.TuffToken.GovernanceLib.1\\\";\\n    bytes32 constant POSITION = keccak256(bytes(NAMESPACE));\\n\\n    struct Voter {\\n        bool voted;\\n        bool approve;\\n    }\\n\\n    struct Election {\\n        string name;\\n        string description;\\n        string author;\\n        uint256 electionEnd;\\n        bool ended;\\n        mapping (address => Voter) voters;\\n        mapping (bool => uint256) votes;\\n    }\\n\\n    struct StateStorage {\\n        bool isInit;\\n        Election[] elections;\\n    }\\n\\n    function getState() internal pure returns (StateStorage storage stateStorage) {\\n        bytes32 position = POSITION;\\n\\n        //In solidity > 0.7, inline assembly slot and offset variables are referenced with a period. For instance,\\n        // variable `x` is referenced by `x.slot`\\n        assembly {\\n            stateStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1e4ee4248a9658ba451039a64f20c108a436def5fef4b2fa2e10e39eeb7350c6\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c8063af81057e11610081578063c6e58dba1161005b578063c6e58dba146101b8578063c9d27afe146101cb578063e49907fa146101de57600080fd5b8063af81057e14610177578063b78a21751461019b578063c31238fc146101b057600080fd5b80635ee6d675116100b25780635ee6d6751461010c5780638a241f4c1461011f5780639c98bcbb1461014757600080fd5b8063181e0124146100ce5780631a513774146100f4575b600080fd5b6100e16100dc3660046110f6565b6101e6565b6040519081526020015b60405180910390f35b6100fc61029c565b60405190151581526020016100eb565b6100fc61011a36600461110f565b6102b1565b61013261012d3660046110f6565b61035a565b604080519283526020830191909152016100eb565b61015a6101553660046110f6565b610445565b6040805193151584526020840192909252908201526060016100eb565b61018a6101853660046110f6565b6105f4565b6040516100eb9594939291906111a1565b6101ae6101a9366004611297565b6108ec565b005b6101ae6109e5565b61015a6101c63660046110f6565b610a5d565b6100fc6101d9366004611327565b610c92565b6100e1610f8e565b60006101f061029c565b6040518060600160405280602681526020016114f860269139604051602001610219919061135c565b6040516020818303038152906040529061024f5760405162461bcd60e51b815260040161024691906113a8565b60405180910390fd5b50600061025a611003565b905061029542826001018581548110610275576102756113bb565b90600052602060002090600702016003015461102d90919063ffffffff16565b9392505050565b6000806102a7611003565b5460ff1692915050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152600090819030906370a082319060240160206040518083038186803b15801561031b57600080fd5b505afa15801561032f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035391906113d1565b1192915050565b60008061036561029c565b6040518060600160405280602681526020016114f86026913960405160200161038e919061135c565b604051602081830303815290604052906103bb5760405162461bcd60e51b815260040161024691906113a8565b5060006103c6611003565b90508060010184815481106103dd576103dd6113bb565b9060005260206000209060070201600601600060011515151581526020019081526020016000205481600101858154811061041a5761041a6113bb565b6000918252602080832083805260066007909302019190910190526040902054909350915050915091565b600080600061045261029c565b6040518060600160405280602681526020016114f86026913960405160200161047b919061135c565b604051602081830303815290604052906104a85760405162461bcd60e51b815260040161024691906113a8565b5060006104b3611003565b90508060010185815481106104ca576104ca6113bb565b906000526020600020906007020160030154421161052a5760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f7420656e64206265666f726520616c6c6f747465642074696d652e6044820152606401610246565b80600101858154811061053f5761053f6113bb565b600091825260209091206004600790920201015460ff16156105a35760405162461bcd60e51b815260206004820181905260248201527f456c656374696f6e2068617320616c7265616479206265656e20656e6465642e6044820152606401610246565b60018160010186815481106105ba576105ba6113bb565b60009182526020909120600790910201600401805460ff19169115159190911790556105e585610a5d565b935093509350505b9193909250565b606080606060008061060461029c565b6040518060600160405280602681526020016114f86026913960405160200161062d919061135c565b6040516020818303038152906040529061065a5760405162461bcd60e51b815260040161024691906113a8565b506000610665611003565b905080600101878154811061067c5761067c6113bb565b90600052602060002090600702016000018160010188815481106106a2576106a26113bb565b90600052602060002090600702016001018260010189815481106106c8576106c86113bb565b9060005260206000209060070201600201836001018a815481106106ee576106ee6113bb565b906000526020600020906007020160030154846001018b81548110610715576107156113bb565b906000526020600020906007020160040160009054906101000a900460ff16848054610740906113ea565b80601f016020809104026020016040519081016040528092919081815260200182805461076c906113ea565b80156107b95780601f1061078e576101008083540402835291602001916107b9565b820191906000526020600020905b81548152906001019060200180831161079c57829003601f168201915b505050505094508380546107cc906113ea565b80601f01602080910402602001604051908101604052809291908181526020018280546107f8906113ea565b80156108455780601f1061081a57610100808354040283529160200191610845565b820191906000526020600020905b81548152906001019060200180831161082857829003601f168201915b50505050509350828054610858906113ea565b80601f0160208091040260200160405190810160405280929190818152602001828054610884906113ea565b80156108d15780601f106108a6576101008083540402835291602001916108d1565b820191906000526020600020905b8154815290600101906020018083116108b457829003601f168201915b50505050509250955095509550955095505091939590929450565b6108f461029c565b6040518060600160405280602681526020016114f86026913960405160200161091d919061135c565b6040516020818303038152906040529061094a5760405162461bcd60e51b815260040161024691906113a8565b506000610955611003565b90506000610961610f8e565b60018084018054909101808255600082815292935083908110610986576109866113bb565b6000918252602091829020895160079092020192506109aa918391908a019061105d565b5085516109c0906001830190602089019061105d565b5084516109d6906002830190602088019061105d565b50600301929092555050505050565b6109ed61029c565b156040518060600160405280602681526020016114f860269139604051602001610a179190611425565b60405160208183030381529060405290610a445760405162461bcd60e51b815260040161024691906113a8565b506000610a4f611003565b805460ff1916600117905550565b6000806000610a6a61029c565b6040518060600160405280602681526020016114f860269139604051602001610a93919061135c565b60405160208183030381529060405290610ac05760405162461bcd60e51b815260040161024691906113a8565b506000610acb611003565b90506000816001018681548110610ae457610ae46113bb565b6000918252602080832083805260066007909302019190910190526040902054905080610b8e576001826001018781548110610b2257610b226113bb565b90600052602060002090600702016006016000600115151515815260200190815260200160002054836001018881548110610b5f57610b5f6113bb565b6000918252602080832083805260066007909302019190910190526040902054919650945092506105ed915050565b6021610c106064610c0a856001018a81548110610bad57610bad6113bb565b60009182526020808320838052600660079093020191909101905260409020546001870180548c908110610be357610be36113bb565b60009182526020808320600184526006600790930201919091019052604090205490611039565b90611045565b11826001018781548110610c2657610c266113bb565b90600052602060002090600702016006016000600115151515815260200190815260200160002054836001018881548110610c6357610c636113bb565b600091825260208083208380526007929092029091016006019052604090205491989097509095509350505050565b6000610c9c61029c565b6040518060600160405280602681526020016114f860269139604051602001610cc5919061135c565b60405160208183030381529060405290610cf25760405162461bcd60e51b815260040161024691906113a8565b506000610cfd611003565b9050806001018481548110610d1457610d146113bb565b9060005260206000209060070201600301544210610d9a5760405162461bcd60e51b815260206004820152602560248201527f43616e6e6f7420766f746520616674657220656c656374696f6e20686173206560448201527f6e6465642e0000000000000000000000000000000000000000000000000000006064820152608401610246565b806001018481548110610daf57610daf6113bb565b600091825260208083203384526005600790930201919091019052604090205460ff1615610e1f5760405162461bcd60e51b815260206004820152601260248201527f43616e6e6f7420766f74652074776963652e00000000000000000000000000006044820152606401610246565b610e28336102b1565b610e745760405162461bcd60e51b815260206004820152601960248201527f4d757374206265206120686f6c64657220746f20766f74652e000000000000006044820152606401610246565b6001816001018581548110610e8b57610e8b6113bb565b60009182526020808320338452600792909202909101600501905260409020805460ff191691151591909117905560018101805484919086908110610ed257610ed26113bb565b6000918252602080832033845260056007909302019190910190526040902080549115156101000261ff001990921691909117905560018181018054610f4c92919087908110610f2457610f246113bb565b6000918252602080832088151584526006600790930201919091019052604090205490611051565b816001018581548110610f6157610f616113bb565b60009182526020808320871515845260066007909302019190910190526040902055506001905092915050565b6000610f9861029c565b6040518060600160405280602681526020016114f860269139604051602001610fc1919061135c565b60405160208183030381529060405290610fee5760405162461bcd60e51b815260040161024691906113a8565b506000610ff9611003565b6001015491505090565b6000806040518060600160405280602681526020016114f860269139805160209091012092915050565b60006102958284611487565b6000610295828461149e565b600061029582846114c0565b600061029582846114df565b828054611069906113ea565b90600052602060002090601f01602090048101928261108b57600085556110d1565b82601f106110a457805160ff19168380011785556110d1565b828001600101855582156110d1579182015b828111156110d15782518255916020019190600101906110b6565b506110dd9291506110e1565b5090565b5b808211156110dd57600081556001016110e2565b60006020828403121561110857600080fd5b5035919050565b60006020828403121561112157600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461029557600080fd5b60005b83811015611160578181015183820152602001611148565b8381111561116f576000848401525b50505050565b6000815180845261118d816020860160208601611145565b601f01601f19169290920160200192915050565b60a0815260006111b460a0830188611175565b82810360208401526111c68188611175565b905082810360408401526111da8187611175565b606084019590955250509015156080909101529392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261121b57600080fd5b813567ffffffffffffffff80821115611236576112366111f4565b604051601f8301601f19908116603f0116810190828211818310171561125e5761125e6111f4565b8160405283815286602085880101111561127757600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156112ad57600080fd5b843567ffffffffffffffff808211156112c557600080fd5b6112d18883890161120a565b955060208701359150808211156112e757600080fd5b6112f38883890161120a565b9450604087013591508082111561130957600080fd5b506113168782880161120a565b949793965093946060013593505050565b6000806040838503121561133a57600080fd5b823591506020830135801515811461135157600080fd5b809150509250929050565b6000825161136e818460208701611145565b6101d160f51b9201918252507f554e494e495449414c495a4544000000000000000000000000000000000000006002820152600f01919050565b6020815260006102956020830184611175565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156113e357600080fd5b5051919050565b600181811c908216806113fe57607f821691505b6020821081141561141f57634e487b7160e01b600052602260045260246000fd5b50919050565b60008251611437818460208701611145565b6101d160f51b9201918252507f414c52454144595f494e495449414c495a4544000000000000000000000000006002820152601501919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561149957611499611471565b500390565b6000826114bb57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156114da576114da611471565b500290565b600082198211156114f2576114f2611471565b50019056fe696f2e42756666436861696e2e54756666546f6b656e2e476f7665726e616e63654c69622e31a2646970667358221220269288419c3699936209e0427bb9cd0019c0214eb92707f91783b63f4dc8d77064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}