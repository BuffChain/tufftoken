{
  "address": "0xE72f3661d805C0d667fBA4014341d9390a5E372a",
  "abi": [
    {
      "inputs": [],
      "name": "getChainLinkPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregatorAddr",
          "type": "address"
        }
      ],
      "name": "initChainLinkPriceConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isChainLinkPriceConsumerInit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregatorAddr",
          "type": "address"
        }
      ],
      "name": "setPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f472cbb21c41e7b7f53b074d670da9fc29218c52d67c15c805d056370b05710",
  "receipt": {
    "to": null,
    "from": "0x4d5031A3BF5b4828932D0e1C3006cC860b97aC3c",
    "contractAddress": "0xE72f3661d805C0d667fBA4014341d9390a5E372a",
    "transactionIndex": 1,
    "gasUsed": "463946",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x11dcd13db23b2f16a1fda3f9dffba00c90209d2490a190c75876d1bb464f56a0",
    "transactionHash": "0x4f472cbb21c41e7b7f53b074d670da9fc29218c52d67c15c805d056370b05710",
    "logs": [],
    "blockNumber": 28963702,
    "cumulativeGasUsed": "501475",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "623637cf15ed6b339e4379a041929b17",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getChainLinkPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregatorAddr\",\"type\":\"address\"}],\"name\":\"initChainLinkPriceConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isChainLinkPriceConsumerInit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregatorAddr\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v7/ChainLinkPriceConsumer.sol\":\"ChainLinkPriceConsumer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x62c8752bb170233359e653c61d491d6a79fe1d7d7281377c5ac4e9c03ce811ea\",\"license\":\"MIT\"},\"contracts/v7/ChainLinkPriceConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.7.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport {ChainLinkPriceConsumerLib} from \\\"./ChainLinkPriceConsumerLib.sol\\\";\\n\\ncontract ChainLinkPriceConsumer {\\n    modifier initChainLinkPriceConsumerLock() {\\n        require(isChainLinkPriceConsumerInit(), string(abi.encodePacked(ChainLinkPriceConsumerLib.NAMESPACE, \\\": \\\", \\\"UNINITIALIZED\\\")));\\n        _;\\n    }\\n\\n    function isChainLinkPriceConsumerInit() public view returns (bool) {\\n        ChainLinkPriceConsumerLib.StateStorage storage ss = ChainLinkPriceConsumerLib.getState();\\n        return ss.isInit;\\n    }\\n\\n    //Basically a constructor, but the hardhat-deploy plugin does not support diamond contracts with facets that has\\n    // constructors. We imitate a constructor with a one-time only function. This is called immediately after deployment\\n    function initChainLinkPriceConsumer(address _aggregatorAddr) public {\\n        require(!isChainLinkPriceConsumerInit(), string(abi.encodePacked(ChainLinkPriceConsumerLib.NAMESPACE, \\\": \\\", \\\"ALREADY_INITIALIZED\\\")));\\n\\n        ChainLinkPriceConsumerLib.StateStorage storage ss = ChainLinkPriceConsumerLib.getState();\\n\\n        ss.priceFeed = AggregatorV3Interface(_aggregatorAddr);\\n        ss.isInit = true;\\n    }\\n\\n    function setPriceFeed(address _aggregatorAddr) public initChainLinkPriceConsumerLock {\\n        ChainLinkPriceConsumerLib.StateStorage storage ss = ChainLinkPriceConsumerLib.getState();\\n        ss.priceFeed = AggregatorV3Interface(_aggregatorAddr);\\n    }\\n\\n    function getLatestRoundData() public view initChainLinkPriceConsumerLock returns (uint80, int, uint, uint, uint80) {\\n        ChainLinkPriceConsumerLib.StateStorage storage ss = ChainLinkPriceConsumerLib.getState();\\n        return ss.priceFeed.latestRoundData();\\n    }\\n\\n    function getChainLinkPrice() external view initChainLinkPriceConsumerLock returns (uint256) {\\n        (,int price,,,) = getLatestRoundData();\\n        return uint256(price);\\n    }\\n}\\n\",\"keccak256\":\"0x9718e1df81db27346b73948ec4c958eb70c42d7f00f101dd2951d696112e7f13\",\"license\":\"agpl-3.0\"},\"contracts/v7/ChainLinkPriceConsumerLib.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.7.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary ChainLinkPriceConsumerLib {\\n\\n    //IMPORTANT: You must increment this string if you add a new variable to StateStorage that is not at the end\\n    string constant NAMESPACE = \\\"io.BuffChain.TuffToken.ChainLinkPriceConsumerLib.1\\\";\\n    bytes32 constant POSITION = keccak256(bytes(NAMESPACE));\\n\\n    struct StateStorage {\\n        bool isInit;\\n        AggregatorV3Interface priceFeed;\\n    }\\n\\n    function getState() internal pure returns (StateStorage storage stateStorage) {\\n        bytes32 position = POSITION;\\n\\n        //In solidity > 0.7, inline assembly slot and offset variables are referenced with a period. For instance,\\n        // variable `x` is referenced by `x.slot`\\n        assembly {\\n            stateStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ada8c4cccf532a7172e8165726ae437fec87f608691591869e04d46e040f12e\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061076e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063be790b3211610050578063be790b32146100e6578063e6613cf214610100578063ec8c86e81461011c57610067565b80632daae2f31461006c578063724e78da146100be575b600080fd5b610074610142565b604051808669ffffffffffffffffffff1681526020018581526020018481526020018381526020018269ffffffffffffffffffff1681526020019550505050505060405180910390f35b6100e4600480360360208110156100d457600080fd5b50356001600160a01b031661032f565b005b6100ee610467565b60408051918252519081900360200190f35b610108610577565b604080519115158252519081900360200190f35b6100e46004803603602081101561013257600080fd5b50356001600160a01b031661058c565b6000806000806000610152610577565b604051806060016040528060328152602001610707603291396040516020018082805190602001908083835b6020831061019d5780518252601f19909201916020918201910161017e565b6001836020036101000a038019825116818451168082178552505050505050905001806101d160f51b815250600201806c15539253925512505312569151609a1b815250600d019150506040516020818303038152906040529061027f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561024457818101518382015260200161022c565b50505050905090810190601f1680156102715780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600061028a6106dc565b90508060000160019054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156102dc57600080fd5b505afa1580156102f0573d6000803e3d6000fd5b505050506040513d60a081101561030657600080fd5b508051602082015160408301516060840151608090940151929a91995097509195509350915050565b610337610577565b604051806060016040528060328152602001610707603291396040516020018082805190602001908083835b602083106103825780518252601f199092019160209182019101610363565b6001836020036101000a038019825116818451168082178552505050505050905001806101d160f51b815250600201806c15539253925512505312569151609a1b815250600d01915050604051602081830303815290604052906104275760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561024457818101518382015260200161022c565b5060006104326106dc565b80546001600160a01b039093166101000274ffffffffffffffffffffffffffffffffffffffff00199093169290921790915550565b6000610471610577565b604051806060016040528060328152602001610707603291396040516020018082805190602001908083835b602083106104bc5780518252601f19909201916020918201910161049d565b6001836020036101000a038019825116818451168082178552505050505050905001806101d160f51b815250600201806c15539253925512505312569151609a1b815250600d01915050604051602081830303815290604052906105615760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561024457818101518382015260200161022c565b50600061056c610142565b509194505050505090565b6000806105826106dc565b5460ff1691505090565b610594610577565b15604051806060016040528060328152602001610707603291396040516020018082805190602001908083835b602083106105e05780518252601f1990920191602091820191016105c1565b6001836020036101000a038019825116818451168082178552505050505050905001806101d160f51b815250600201807f414c52454144595f494e495449414c495a454400000000000000000000000000815250601301915050604051602081830303815290604052906106955760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561024457818101518382015260200161022c565b5060006106a06106dc565b805460ff196001600160a01b039094166101000274ffffffffffffffffffffffffffffffffffffffff0019909116179290921660011790915550565b6000806040518060600160405280603281526020016107076032913980516020909101209291505056fe696f2e42756666436861696e2e54756666546f6b656e2e436861696e4c696e6b5072696365436f6e73756d65724c69622e31a2646970667358221220fdb8eafb974e90ca66883b94a25738f7abc76bce4880834d1a4c4c51135ad83f64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063be790b3211610050578063be790b32146100e6578063e6613cf214610100578063ec8c86e81461011c57610067565b80632daae2f31461006c578063724e78da146100be575b600080fd5b610074610142565b604051808669ffffffffffffffffffff1681526020018581526020018481526020018381526020018269ffffffffffffffffffff1681526020019550505050505060405180910390f35b6100e4600480360360208110156100d457600080fd5b50356001600160a01b031661032f565b005b6100ee610467565b60408051918252519081900360200190f35b610108610577565b604080519115158252519081900360200190f35b6100e46004803603602081101561013257600080fd5b50356001600160a01b031661058c565b6000806000806000610152610577565b604051806060016040528060328152602001610707603291396040516020018082805190602001908083835b6020831061019d5780518252601f19909201916020918201910161017e565b6001836020036101000a038019825116818451168082178552505050505050905001806101d160f51b815250600201806c15539253925512505312569151609a1b815250600d019150506040516020818303038152906040529061027f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561024457818101518382015260200161022c565b50505050905090810190601f1680156102715780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600061028a6106dc565b90508060000160019054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156102dc57600080fd5b505afa1580156102f0573d6000803e3d6000fd5b505050506040513d60a081101561030657600080fd5b508051602082015160408301516060840151608090940151929a91995097509195509350915050565b610337610577565b604051806060016040528060328152602001610707603291396040516020018082805190602001908083835b602083106103825780518252601f199092019160209182019101610363565b6001836020036101000a038019825116818451168082178552505050505050905001806101d160f51b815250600201806c15539253925512505312569151609a1b815250600d01915050604051602081830303815290604052906104275760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561024457818101518382015260200161022c565b5060006104326106dc565b80546001600160a01b039093166101000274ffffffffffffffffffffffffffffffffffffffff00199093169290921790915550565b6000610471610577565b604051806060016040528060328152602001610707603291396040516020018082805190602001908083835b602083106104bc5780518252601f19909201916020918201910161049d565b6001836020036101000a038019825116818451168082178552505050505050905001806101d160f51b815250600201806c15539253925512505312569151609a1b815250600d01915050604051602081830303815290604052906105615760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561024457818101518382015260200161022c565b50600061056c610142565b509194505050505090565b6000806105826106dc565b5460ff1691505090565b610594610577565b15604051806060016040528060328152602001610707603291396040516020018082805190602001908083835b602083106105e05780518252601f1990920191602091820191016105c1565b6001836020036101000a038019825116818451168082178552505050505050905001806101d160f51b815250600201807f414c52454144595f494e495449414c495a454400000000000000000000000000815250601301915050604051602081830303815290604052906106955760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561024457818101518382015260200161022c565b5060006106a06106dc565b805460ff196001600160a01b039094166101000274ffffffffffffffffffffffffffffffffffffffff0019909116179290921660011790915550565b6000806040518060600160405280603281526020016107076032913980516020909101209291505056fe696f2e42756666436861696e2e54756666546f6b656e2e436861696e4c696e6b5072696365436f6e73756d65724c69622e31a2646970667358221220fdb8eafb974e90ca66883b94a25738f7abc76bce4880834d1a4c4c51135ad83f64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}