{
  "address": "0xF49630D0F5fF73BBcB246B0c5De2A0BD04d3014a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "takeFee",
          "type": "bool"
        }
      ],
      "name": "calculateFarmFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "excludeFromFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFarmFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "includeInFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "name": "initTuffToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isExcludedFromFee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTuffTokenInit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_farmFee",
          "type": "uint256"
        }
      ],
      "name": "setFarmFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6da549671b5f47ac7361b8328c90884f83ea5e23afce31818510b9475583b3c1",
  "receipt": {
    "to": null,
    "from": "0x4d5031A3BF5b4828932D0e1C3006cC860b97aC3c",
    "contractAddress": "0xF49630D0F5fF73BBcB246B0c5De2A0BD04d3014a",
    "transactionIndex": 4,
    "gasUsed": "1515310",
    "logsBloom": "0x
    "blockHash": "0xcbe71d5c8b0cc5c649559c4325413ba395ab04cfed0fcb3da4a7c45c2e3e1bd7",
    "transactionHash": "0x6da549671b5f47ac7361b8328c90884f83ea5e23afce31818510b9475583b3c1",
    "logs": [],
    "blockNumber": 28963697,
    "cumulativeGasUsed": "1863630",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "07b7b6cf29429380ef804aeb33e7809b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"takeFee\",\"type\":\"bool\"}],\"name\":\"calculateFarmFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFarmFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initTuffToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTuffTokenInit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_farmFee\",\"type\":\"uint256\"}],\"name\":\"setFarmFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TuffToken.sol\":\"TuffToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/TuffToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {TuffTokenLib} from \\\"./TuffTokenLib.sol\\\";\\n\\ncontract TuffToken is Context, IERC20 {\\n    modifier tuffTokenInitLock() {\\n        require(isTuffTokenInit(), string(abi.encodePacked(TuffTokenLib.NAMESPACE, \\\": \\\", \\\"UNINITIALIZED\\\")));\\n        _;\\n    }\\n\\n    //TODO: Is this needed?\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    //Basically a constructor, but the hardhat-deploy plugin does not support diamond contracts with facets that has\\n    // constructors. We imitate a constructor with a one-time only function. This is called immediately after deployment\\n    function initTuffToken(address initialOwner) public {\\n        require(!isTuffTokenInit(), string(abi.encodePacked(TuffTokenLib.NAMESPACE, \\\": \\\", \\\"ALREADY_INITIALIZED\\\")));\\n\\n        TuffTokenLib.StateStorage storage ss = TuffTokenLib.getState();\\n\\n        ss.name = \\\"TuffToken\\\";\\n        ss.symbol = \\\"TUFF\\\";\\n        ss.decimals = 9;\\n        ss.farmFee = 10;\\n        ss.totalSupply = 1000000000 * 10 ** ss.decimals;\\n\\n        //Set owner balancer and exclude from fees\\n        ss.balances[initialOwner] = ss.totalSupply;\\n        ss.isExcludedFromFee[initialOwner] = true;\\n\\n        ss.isInit = true;\\n    }\\n\\n    function isTuffTokenInit() public view returns (bool) {\\n        TuffTokenLib.StateStorage storage ss = TuffTokenLib.getState();\\n        return ss.isInit;\\n    }\\n\\n    function name() public view tuffTokenInitLock returns (string memory) {\\n        TuffTokenLib.StateStorage storage ss = TuffTokenLib.getState();\\n        return ss.name;\\n    }\\n\\n    function symbol() public view tuffTokenInitLock returns (string memory) {\\n        TuffTokenLib.StateStorage storage ss = TuffTokenLib.getState();\\n        return ss.symbol;\\n    }\\n\\n    function decimals() public view tuffTokenInitLock returns (uint8) {\\n        TuffTokenLib.StateStorage storage ss = TuffTokenLib.getState();\\n        return ss.decimals;\\n    }\\n\\n    function totalSupply() public view override tuffTokenInitLock returns (uint256) {\\n        TuffTokenLib.StateStorage storage ss = TuffTokenLib.getState();\\n        return ss.totalSupply;\\n    }\\n\\n    function getFarmFee() public view tuffTokenInitLock returns (uint256) {\\n        TuffTokenLib.StateStorage storage ss = TuffTokenLib.getState();\\n        return ss.farmFee;\\n    }\\n\\n    function setFarmFee(uint256 _farmFee) public tuffTokenInitLock {\\n        TuffTokenLib.StateStorage storage ss = TuffTokenLib.getState();\\n        ss.farmFee = _farmFee;\\n    }\\n\\n    function balanceOf(address account) public view override tuffTokenInitLock returns (uint256) {\\n        TuffTokenLib.StateStorage storage ss = TuffTokenLib.getState();\\n        return ss.balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override tuffTokenInitLock returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override tuffTokenInitLock returns (uint256) {\\n        TuffTokenLib.StateStorage storage ss = TuffTokenLib.getState();\\n        return ss.allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override tuffTokenInitLock returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override tuffTokenInitLock returns (bool) {\\n        TuffTokenLib.StateStorage storage ss = TuffTokenLib.getState();\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), ss.allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual tuffTokenInitLock returns (bool) {\\n        TuffTokenLib.StateStorage storage ss = TuffTokenLib.getState();\\n        _approve(_msgSender(), spender, ss.allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual tuffTokenInitLock returns (bool) {\\n        TuffTokenLib.StateStorage storage ss = TuffTokenLib.getState();\\n        _approve(_msgSender(), spender, ss.allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function excludeFromFee(address account) public tuffTokenInitLock {\\n        TuffTokenLib.StateStorage storage ss = TuffTokenLib.getState();\\n        ss.isExcludedFromFee[account] = true;\\n    }\\n\\n    function includeInFee(address account) public tuffTokenInitLock {\\n        TuffTokenLib.StateStorage storage ss = TuffTokenLib.getState();\\n        ss.isExcludedFromFee[account] = false;\\n    }\\n\\n    function isExcludedFromFee(address account) public view tuffTokenInitLock returns (bool) {\\n        TuffTokenLib.StateStorage storage ss = TuffTokenLib.getState();\\n        return ss.isExcludedFromFee[account];\\n    }\\n\\n    function calculateFarmFee(uint256 _amount, bool takeFee) public view tuffTokenInitLock returns (uint256) {\\n        if (!takeFee) {\\n            return 0;\\n        }\\n\\n        TuffTokenLib.StateStorage storage ss = TuffTokenLib.getState();\\n\\n        uint256 fee = _amount.mul(ss.farmFee).div(10 ** 2);\\n        require(fee > 0, string(abi.encodePacked(TuffTokenLib.NAMESPACE, \\\": \\\", \\\"Insufficient amount.\\\")));\\n        return fee;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        TuffTokenLib.StateStorage storage ss = TuffTokenLib.getState();\\n\\n        ss.allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        require(balanceOf(from) >= amount, \\\"Sender does not have adequate funds.\\\");\\n\\n        TuffTokenLib.StateStorage storage ss = TuffTokenLib.getState();\\n\\n        //indicates if fee should be deducted from transfer\\n        bool takeFee = true;\\n\\n        //if any account belongs to _isExcludedFromFee account then remove the fee\\n        if (ss.isExcludedFromFee[from] || ss.isExcludedFromFee[to]) {\\n            takeFee = false;\\n        }\\n\\n        uint256 farmFeeAmount = calculateFarmFee(amount, takeFee);\\n        uint256 transferAmount = amount.sub(farmFeeAmount);\\n\\n        ss.balances[from] = ss.balances[from].sub(amount);\\n        ss.balances[to] = ss.balances[to].add(transferAmount);\\n\\n        ss.balances[address(this)] = ss.balances[address(this)].add(farmFeeAmount);\\n\\n        emit Transfer(from, to, transferAmount);\\n        emit Transfer(from, address(this), farmFeeAmount);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x15ccc910fd686d0169428112964ec6d14047ae16f50048fd360b259fabca79b4\",\"license\":\"agpl-3.0\"},\"contracts/TuffTokenLib.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary TuffTokenLib {\\n    //IMPORTANT: You must increment this string if you add a new variable to StateStorage that is not at the end\\n    string constant NAMESPACE = \\\"io.BuffChain.TuffToken.TuffTokenLib.1\\\";\\n    bytes32 constant POSITION = keccak256(bytes(NAMESPACE));\\n\\n    struct StateStorage {\\n        bool isInit;\\n        mapping (address => uint256) balances;\\n        mapping (address => mapping (address => uint256)) allowances;\\n        mapping (address => bool) isExcludedFromFee;\\n\\n        string name;\\n        string symbol;\\n        uint8 decimals;\\n        uint256 farmFee;\\n        uint256 totalSupply;\\n    }\\n\\n    function getState() internal pure returns (StateStorage storage stateStorage) {\\n        bytes32 position = POSITION;\\n\\n        //In solidity > 0.7, inline assembly slot and offset variables are referenced with a period. For instance,\\n        // variable `x` is referenced by `x.slot`\\n        assembly {\\n            stateStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1be3cac40aa9b71ce2e0404177f28d66220032179efb7f264bf85b4e6084eec5\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611a80806100206000396000f3fe6080604052600436106101485760003560e01c806370a08231116100c0578063a457c2d711610074578063dd62ed3e11610059578063dd62ed3e1461035a578063dd87c9841461037a578063ea2f0b371461039a57600080fd5b8063a457c2d71461031a578063a9059cbb1461033a57600080fd5b806395d89b41116100a557806395d89b41146102db5780639b18a85d146102f05780639b9ce73c1461030557600080fd5b806370a082311461029b57806373cd5512146102bb57600080fd5b8063313ce567116101175780633e545205116100fc5780633e54520514610239578063437823ec1461025b5780635342acb41461027b57600080fd5b8063313ce567146101f2578063395093511461021957600080fd5b806306fdde0314610154578063095ea7b31461017f57806318160ddd146101af57806323b872dd146101d257600080fd5b3661014f57005b600080fd5b34801561016057600080fd5b506101696103ba565b60405161017691906115f4565b60405180910390f35b34801561018b57600080fd5b5061019f61019a36600461163e565b6104c3565b6040519015158152602001610176565b3480156101bb57600080fd5b506101c4610539565b604051908152602001610176565b3480156101de57600080fd5b5061019f6101ed366004611668565b6105ae565b3480156101fe57600080fd5b50610207610685565b60405160ff9091168152602001610176565b34801561022557600080fd5b5061019f61023436600461163e565b6106fd565b34801561024557600080fd5b506102596102543660046116a4565b6107ab565b005b34801561026757600080fd5b506102596102763660046116bd565b61081e565b34801561028757600080fd5b5061019f6102963660046116bd565b6108b1565b3480156102a757600080fd5b506101c46102b63660046116bd565b610944565b3480156102c757600080fd5b506101c46102d63660046116d8565b6109d3565b3480156102e757600080fd5b50610169610ad6565b3480156102fc57600080fd5b506101c4610b52565b34801561031157600080fd5b5061019f610bc7565b34801561032657600080fd5b5061019f61033536600461163e565b610bdc565b34801561034657600080fd5b5061019f61035536600461163e565b610c98565b34801561036657600080fd5b506101c461037536600461170d565b610d04565b34801561038657600080fd5b506102596103953660046116bd565b610da0565b3480156103a657600080fd5b506102596103b53660046116bd565b610f19565b60606103c4610bc7565b6040518060600160405280602581526020016119d9602591396040516020016103ed9190611740565b604051602081830303815290604052906104235760405162461bcd60e51b815260040161041a91906115f4565b60405180910390fd5b50600061042e610fa9565b905080600401805461043f9061178c565b80601f016020809104026020016040519081016040528092919081815260200182805461046b9061178c565b80156104b85780601f1061048d576101008083540402835291602001916104b8565b820191906000526020600020905b81548152906001019060200180831161049b57829003601f168201915b505050505091505090565b60006104cd610bc7565b6040518060600160405280602581526020016119d9602591396040516020016104f69190611740565b604051602081830303815290604052906105235760405162461bcd60e51b815260040161041a91906115f4565b5061052f338484610fd3565b5060015b92915050565b6000610543610bc7565b6040518060600160405280602581526020016119d96025913960405160200161056c9190611740565b604051602081830303815290604052906105995760405162461bcd60e51b815260040161041a91906115f4565b5060006105a4610fa9565b6008015491505090565b60006105b8610bc7565b6040518060600160405280602581526020016119d9602591396040516020016105e19190611740565b6040516020818303038152906040529061060e5760405162461bcd60e51b815260040161041a91906115f4565b506000610619610fa9565b905061062685858561113f565b61067a8533610675866040518060600160405280602881526020016119fe602891396001600160a01b038b166000908152600288016020908152604080832033845290915290205491906114c8565b610fd3565b506001949350505050565b600061068f610bc7565b6040518060600160405280602581526020016119d9602591396040516020016106b89190611740565b604051602081830303815290604052906106e55760405162461bcd60e51b815260040161041a91906115f4565b5060006106f0610fa9565b6006015460ff1691505090565b6000610707610bc7565b6040518060600160405280602581526020016119d9602591396040516020016107309190611740565b6040516020818303038152906040529061075d5760405162461bcd60e51b815260040161041a91906115f4565b506000610768610fa9565b33600081815260028301602090815260408083206001600160a01b038a1684529091529020549192506107a191869061067590876114f4565b5060019392505050565b6107b3610bc7565b6040518060600160405280602581526020016119d9602591396040516020016107dc9190611740565b604051602081830303815290604052906108095760405162461bcd60e51b815260040161041a91906115f4565b506000610814610fa9565b6007019190915550565b610826610bc7565b6040518060600160405280602581526020016119d96025913960405160200161084f9190611740565b6040516020818303038152906040529061087c5760405162461bcd60e51b815260040161041a91906115f4565b506000610887610fa9565b6001600160a01b03909216600090815260039092016020525060409020805460ff19166001179055565b60006108bb610bc7565b6040518060600160405280602581526020016119d9602591396040516020016108e49190611740565b604051602081830303815290604052906109115760405162461bcd60e51b815260040161041a91906115f4565b50600061091c610fa9565b6001600160a01b03841660009081526003909101602052604090205460ff169150505b919050565b600061094e610bc7565b6040518060600160405280602581526020016119d9602591396040516020016109779190611740565b604051602081830303815290604052906109a45760405162461bcd60e51b815260040161041a91906115f4565b5060006109af610fa9565b6001600160a01b038416600090815260019091016020526040902054915050919050565b60006109dd610bc7565b6040518060600160405280602581526020016119d960259139604051602001610a069190611740565b60405160208183030381529060405290610a335760405162461bcd60e51b815260040161041a91906115f4565b5081610a4157506000610533565b6000610a4b610fa9565b90506000610a716064610a6b84600701548861150790919063ffffffff16565b90611513565b9050600081116040518060600160405280602581526020016119d960259139604051602001610aa091906117c7565b60405160208183030381529060405290610acd5760405162461bcd60e51b815260040161041a91906115f4565b50949350505050565b6060610ae0610bc7565b6040518060600160405280602581526020016119d960259139604051602001610b099190611740565b60405160208183030381529060405290610b365760405162461bcd60e51b815260040161041a91906115f4565b506000610b41610fa9565b905080600501805461043f9061178c565b6000610b5c610bc7565b6040518060600160405280602581526020016119d960259139604051602001610b859190611740565b60405160208183030381529060405290610bb25760405162461bcd60e51b815260040161041a91906115f4565b506000610bbd610fa9565b6007015491505090565b600080610bd2610fa9565b5460ff1692915050565b6000610be6610bc7565b6040518060600160405280602581526020016119d960259139604051602001610c0f9190611740565b60405160208183030381529060405290610c3c5760405162461bcd60e51b815260040161041a91906115f4565b506000610c47610fa9565b90506107a1338561067586604051806060016040528060258152602001611a266025913933600090815260028801602090815260408083206001600160a01b038e16845290915290205491906114c8565b6000610ca2610bc7565b6040518060600160405280602581526020016119d960259139604051602001610ccb9190611740565b60405160208183030381529060405290610cf85760405162461bcd60e51b815260040161041a91906115f4565b5061052f33848461113f565b6000610d0e610bc7565b6040518060600160405280602581526020016119d960259139604051602001610d379190611740565b60405160208183030381529060405290610d645760405162461bcd60e51b815260040161041a91906115f4565b506000610d6f610fa9565b6001600160a01b03948516600090815260029190910160209081526040808320959096168252939093525050205490565b610da8610bc7565b156040518060600160405280602581526020016119d960259139604051602001610dd29190611813565b60405160208183030381529060405290610dff5760405162461bcd60e51b815260040161041a91906115f4565b506000610e0a610fa9565b6040805180820190915260098082527f54756666546f6b656e00000000000000000000000000000000000000000000006020909201918252919250610e549160048401919061152b565b506040805180820190915260048082527f54554646000000000000000000000000000000000000000000000000000000006020909201918252610e9b91600584019161152b565b5060068101805460ff19166009908117909155600a60078301819055610ec19190611959565b610ecf90633b9aca00611968565b600882018190556001600160a01b03909216600090815260018083016020908152604080842095909555600384019052929020805460ff1990811684179091558154169091179055565b610f21610bc7565b6040518060600160405280602581526020016119d960259139604051602001610f4a9190611740565b60405160208183030381529060405290610f775760405162461bcd60e51b815260040161041a91906115f4565b506000610f82610fa9565b6001600160a01b03909216600090815260039092016020525060409020805460ff19169055565b6000806040518060600160405280602581526020016119d960259139805160209091012092915050565b6001600160a01b03831661104e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161041a565b6001600160a01b0382166110ca5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161041a565b60006110d4610fa9565b6001600160a01b0385811660008181526002840160209081526040808320948916808452948252918290208790559051868152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050565b6001600160a01b0383166111bb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161041a565b6001600160a01b0382166112375760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161041a565b600081116112ad5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d75737420626520677265617465722060448201527f7468616e207a65726f0000000000000000000000000000000000000000000000606482015260840161041a565b806112b784610944565b101561132a5760405162461bcd60e51b8152602060048201526024808201527f53656e64657220646f6573206e6f74206861766520616465717561746520667560448201527f6e64732e00000000000000000000000000000000000000000000000000000000606482015260840161041a565b6000611334610fa9565b6001600160a01b038516600090815260038201602052604090205490915060019060ff168061137d57506001600160a01b038416600090815260038301602052604090205460ff165b15611386575060005b600061139284836109d3565b905060006113a0858361151f565b6001600160a01b03881660009081526001860160205260409020549091506113c8908661151f565b6001600160a01b03808916600090815260018701602052604080822093909355908816815220546113f990826114f4565b6001600160a01b038716600090815260018601602052604080822092909255308152205461142790836114f4565b30600090815260018601602090815260409182902092909255518281526001600160a01b0388811692908a16917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a360405182815230906001600160a01b038916907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350505050505050565b600081848411156114ec5760405162461bcd60e51b815260040161041a91906115f4565b505050900390565b60006115008284611987565b9392505050565b60006115008284611968565b6000611500828461199f565b600061150082846119c1565b8280546115379061178c565b90600052602060002090601f016020900481019282611559576000855561159f565b82601f1061157257805160ff191683800117855561159f565b8280016001018555821561159f579182015b8281111561159f578251825591602001919060010190611584565b506115ab9291506115af565b5090565b5b808211156115ab57600081556001016115b0565b60005b838110156115df5781810151838201526020016115c7565b838111156115ee576000848401525b50505050565b60208152600082518060208401526116138160408501602087016115c4565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461093f57600080fd5b6000806040838503121561165157600080fd5b61165a83611627565b946020939093013593505050565b60008060006060848603121561167d57600080fd5b61168684611627565b925061169460208501611627565b9150604084013590509250925092565b6000602082840312156116b657600080fd5b5035919050565b6000602082840312156116cf57600080fd5b61150082611627565b600080604083850312156116eb57600080fd5b823591506020830135801515811461170257600080fd5b809150509250929050565b6000806040838503121561172057600080fd5b61172983611627565b915061173760208401611627565b90509250929050565b600082516117528184602087016115c4565b6101d160f51b9201918252507f554e494e495449414c495a4544000000000000000000000000000000000000006002820152600f01919050565b600181811c908216806117a057607f821691505b602082108114156117c157634e487b7160e01b600052602260045260246000fd5b50919050565b600082516117d98184602087016115c4565b6101d160f51b9201918252507f496e73756666696369656e7420616d6f756e742e0000000000000000000000006002820152601601919050565b600082516118258184602087016115c4565b6101d160f51b9201918252507f414c52454144595f494e495449414c495a4544000000000000000000000000006002820152601501919050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156118b05781600019048211156118965761189661185f565b808516156118a357918102915b93841c939080029061187a565b509250929050565b6000826118c757506001610533565b816118d457506000610533565b81600181146118ea57600281146118f457611910565b6001915050610533565b60ff8411156119055761190561185f565b50506001821b610533565b5060208310610133831016604e8410600b8410161715611933575081810a610533565b61193d8383611875565b80600019048211156119515761195161185f565b029392505050565b600061150060ff8416836118b8565b60008160001904831182151516156119825761198261185f565b500290565b6000821982111561199a5761199a61185f565b500190565b6000826119bc57634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156119d3576119d361185f565b50039056fe696f2e42756666436861696e2e54756666546f6b656e2e54756666546f6b656e4c69622e3145524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220090bef427d791ae470b8de92389ab1b2b32ab8c9fc636f162e9718bc7d259bdf64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}